name: Production Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - 'main'

env:
  APP_ENV: production

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    if: ${{ github.event.pull_request.merged && !contains(github.event.pull_request.labels.*.name, 'Skip:CD') }}
    name: Deploy
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create applicaton.yml file
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML_PROD }}" > src/main/resources/application.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPO: '${{ secrets.APP_NAME }}-${{ secrets.APP_ENV_PROD }}-repo'
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_TAG: ${{ env.APP_ENV }}
        run: |
          docker build -f Dockerfile -t $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ env.ECR_REPO }}:$DOCKER_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:$DOCKER_TAG